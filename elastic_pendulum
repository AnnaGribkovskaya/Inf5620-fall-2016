from numpy import * #syntax takes all definitions from the numpy and places them into current namespace, no need to put np. in front of numpy definition
import matplotlib.pyplot as plt

from matplotlib import animation

 
def simulate(beta=0.9,Theta=30,epsilon=0,num_periods=6,
             time_steps_per_period=60, plot=True):
   

   
    n = num_periods * time_steps_per_period 	#number of timesteps
    
    dt = float(2*pi)/time_steps_per_period	#timestep
   
    rad_Theta = pi*Theta/180.                   #convert to radians
    
    
    K = beta/(1 - beta)                    	#help variable
                                             

 
    x=zeros(n+1)
    y=zeros(n+1)
    tet=zeros(n+1)
    t=linspace(0,dt*n,n+1)
    
    
    
    x[0] = (1+epsilon)*sin(rad_Theta)		# First initial condition
    
    y[0] = 1 - (1 + epsilon)*cos(rad_Theta)
    
    
    
    L = sqrt(x[0]**2 + (y[0] - 1)**2)		
    K2 = (1 - beta/L)*K				#New help variable
    
  
  
    x[1] = x[0]*(1 - 0.5*K2*(dt**2))				#First timestep
    y[1] = y[0] - (y[0] - 1)*K2*0.5*dt**2 - 0.5*beta*dt**2

 #implementation
   
    for i in range(1,n):

        L = sqrt(x[i]**2+(y[i] - 1)**2)
        K2 = (1-beta/L)*K
        x[i+1] = x[i]*(2 - K2*dt**2) - x[i-1]
        y[i+1] = 2*y[i] -(y[i]-1)*K2*dt**2 -y[i-1] - beta*dt**2
        tet=arctan(x/(1 - y)) # Theta as function of time
    
 #plotting 
    if plot:
        plt.figure()
        plt.gca().set_aspect('equal')
        plt.plot(x,y)
        plt.title('Motion of pendulum')
        plt.xlabel('x')
        plt.ylabel('y')
        
        plt.figure()
        plt.plot(t, tet*180/pi)
        plt.title('Angle in degrees')
        plt.xlabel('t')
        plt.ylabel('tet')

        plt.show()
        
        if Theta<10:
            non_elastic = Theta*cos(t)
            plt.figure()
            plt.plot(t, tet*180/pi, '-b')
            plt.plot(t, non_elastic, 'r')
            plt.show()
    return x,y,tet,t



def demo(beta,theta): 
  
    x,y,t,tet = simulate(beta, theta, 0, 3, 600, True)	#  simulate and make plots for 3 periods


    
    

if __name__=="__main__":    
    demo(0.9,30)
