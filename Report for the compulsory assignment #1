\documentclass[11pt]{report}
\usepackage{mathtools}
\usepackage{listings}

\begin{document}

\part{Problem 1: Use linear/quadratic functions for verification}
\chapter{Part a). Derive the equation for the first time step}
The problem is formulated as follows

\[u^{''}+\omega^{2}*U=F(t)\]
\[
u(0) = T \ \textrm{and} \ u^{'}(0)=V, \  \textrm{for} \ t \in (0,T)
\]
Function $U$ gives the displacement from the equilibrium point and function $F$ gives the source term.
In order to fin numerical solution for such problem we should start with discretization of the equation. In operator notations it will look as follows:
\[
[D_{t}D_{t}u + ( \omega_{2})u =f]^n
\]
The equivalent "long" notations are the following:
\[
\dfrac{u(n+1) - 2u(n) + u(n-1)}{dt^{2}}+\omega^{2}u(n)=f 
\]
That can be written as:
\[
u(n+1)= 2u(n) - (\omega*dt)^{2}u(n) - u(n-1)+fdt^{2} 
\]
\[
u(n+1)= (2 - (\omega*dt)^{2})u(n) - u(n-1)+fdt^{2} 
\]

Now we can derive the equation for the first timestep $  u(n=1)$. In order to do this we just need to discretize $ u^{'}(0)=V $ as $ [D_{2t}u=V]^{0} $. 
\[
u(-1)=u(1) -2dtV \ \textrm{and} \ u(1)=\dfrac{(2-(\omega dt)^{2})I +fdt^{2}+2dtV}{2}
\]

\chapter{Part b). Use the method of manufactured solutions}

In this part we are using the method of manufactoring solutions for the verification purporses. The exact solution is chosen in a form of $ u_{e}(x,t)=ct+d $ Initial conditions are used to find restrictions on c and d. 
\[
 [D_{t}D_{t}(u)]_{(n)}=[D_{t}D_{t}(ct+d)]_{(n)}=c[D_{t}D_{t}(t)]_{(n)}+[D_{t}D_{t}(d)]_{(n)}
\]

Let's consider this two parts of equation separately:

\[
 [D_{t}D_{t}(d)]_{(n)}=\dfrac{d(n+1)-2d(n)+d(n-1)}{dt^{2}}=0 \ \textrm{as soos as d(n) is constant}
\]
Another part is:
\[
[D_{t}D_{t}(t)]_{(n)}=\dfrac{t(n+1)-2t(n)+t(n-1)}{dt^{2}}=0 \]
As soon as
\[
 t(n+1)-t(n)=dt \ \textrm{and} \ t(n-1)-t(n)=-dt
\]
Now we can calculate R:
\[
R=[D_{t}D_{t}(u)]_{(n)}-u(t(n))?f(t(n))-u(t(n))=0 \ \textrm{sinse} \ u^{''}(t)=0
\]

\chapter{Part c}
In this part we are using symbolic python to calculate 
\begin{lstlisting}
V, t, I, w, dt = sym.symbols('V t w dt') # global symbols
f = None # global variable for the sourse term in the ODE

def ode_source_term(u):
    """
    Return the terms in the ODE that the source term
    must balance, here m*u'' + f(u') + c*u.
    u is a symbolic Python function of t.
    damping in our case is zero, so we do not include it.
    """
        return sym.diff(u(t), t, t) + w**2*u(t)
  
def residual_discrete_eq(u):
    """
    Return the residual of the discrete eq. with u inserted.
    """
    R = DtDt(u, dt) + w**2*u(t) - f
    return sym.simplify(R)

def residual_discrete_eq_step1(u):
    """
    Return the residual of the discrete eq. at the first
    step with u inserted.
    """
    R = 0.5*(2*(u(t+dt) - u(t))/dt + dt*w**2*u(t) - (2*V + dt*f))
    R = R.subs(t, 0) 
    """
    Substitute t with 0.
    """
    return sym.simplify(R)

def DtDt(u, dt):
    """
    Return second order finite difference for u_tt.
    u is a symbolic Python function of t.
    """
       return (u(t+dt) - 2*u(t) + u(t-dt))/(dt*dt) 
       
def main(u):
    """
    Given some chosen solution u (as a function of t, implemented
    as a Python function), use the method of manufactured solutions
    to compute the source term f, and check if u also solves
    the discrete equations.
    """
print '=== Testing exact solution: %s ===' % u(t)
print "Initial conditions u(0)=%s, u'(0)=%s:" % \
          (u(t).subs(t, 0), sym.diff(u(t), t).subs(t, 0))

    # Method of manufactured solution requires fitting f
    global f  # source term in the ODE
    f = sym.simplify(ode_source_term(u))
    
    # Residual in discrete equations (should be 0)
    print 'residual step1:', residual_discrete_eq_step1(u)
    print 'residual:', residual_discrete_eq(u)

def linear():
    main(lambda t: V*t + I)
    sys.exit("Run quad() in stead of linear if you want numerical solution and plot!")
\end{lstlisting}
\begin{lstlisting}

V, t I,w,dt = sym.symbols('V t w dt') #global symbols
f = None # global variable for the sourse term in the ODE
def ode_source_term(u):
    """Return the terms in the ODE that the source term
    must balance, here m*u'' + f(u') + c*u.
    u is a symbolic Python function of t.
    damping in our case is zero, so we do not include it."""
return sym.diff(u(t), t, t) + w**2*u(t)

\end{lstlisting}

\end{document}
